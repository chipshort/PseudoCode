{
    "code": "l <- 1; r <- n;
    while l $\\lte$ r do
        m <- $\\lfloor$ (l + r) / 2 $\\rfloor$;
        if A[m] = x then
            return m;
        fi
        if x > A[m] then
            l <- m + 1;
        else
            r <- m + 1;
        fi
    od
    return 0;",
    "expected": "(l OpAssign 1); (r OpAssign n); while (l OpLte r) { (m OpAssign FLOOR(EBinop(OpDiv,EParenthesis(EBinop(OpAdd,EConst(CIdent(l)),EConst(CIdent(r)))),EConst(CInt(2))))); if (A[m] OpEq x) { return m; }; if (x OpGt A[m]) { (l OpAssign (m OpAdd 1)); } else { (r OpAssign (m OpAdd 1)); }; }; return 0;"
}