x <- 3;
n <- 5;
A[1..n];
A[1] <- 1;
A[2] <- 2;
A[3] <- 3;
A[4] <- 4;
A[5] <- 5;

while true do
    j <- 1;
    break;
od

func test(A)
    A[1] <- 2;
    return 1;
cnuf

z <- test(A);
z += 5;
return z;
return A;

l <- 1; r <- n;
while l $\leq$ r do
    m <- $\lfloor$ (l + r) / 2 $\rfloor$;
    if A[m] = x then
         return m;
    fi
    if x > A[m] then
        l <- m + 1;
    else
        r <- m + 1;
    fi
od
return 0;